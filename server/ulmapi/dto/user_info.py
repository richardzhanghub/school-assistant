# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ulmapi.dto.base_model_ import Model
from ulmapi.dto.course_info import CourseInfo
from ulmapi import util

from ulmapi.dto.course_info import CourseInfo  # noqa: E501

class UserInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_schedule=None, time_recorded=None, username=None, email=None, joined_at=None, courses=None):  # noqa: E501
        """UserInfo - a model defined in OpenAPI

        :param current_schedule: The current_schedule of this UserInfo.  # noqa: E501
        :type current_schedule: CourseInfo
        :param time_recorded: The time_recorded of this UserInfo.  # noqa: E501
        :type time_recorded: Dict[str, float]
        :param username: The username of this UserInfo.  # noqa: E501
        :type username: str
        :param email: The email of this UserInfo.  # noqa: E501
        :type email: str
        :param joined_at: The joined_at of this UserInfo.  # noqa: E501
        :type joined_at: datetime
        :param courses: The courses of this UserInfo.  # noqa: E501
        :type courses: Dict[str, CourseInfo]
        """
        self.openapi_types = {
            'current_schedule': CourseInfo,
            'time_recorded': Dict[str, float],
            'username': str,
            'email': str,
            'joined_at': datetime,
            'courses': Dict[str, CourseInfo]
        }

        self.attribute_map = {
            'current_schedule': 'current_schedule',
            'time_recorded': 'time_recorded',
            'username': 'username',
            'email': 'email',
            'joined_at': 'joined_at',
            'courses': 'courses'
        }

        self._current_schedule = current_schedule
        self._time_recorded = time_recorded
        self._username = username
        self._email = email
        self._joined_at = joined_at
        self._courses = courses

    @classmethod
    def from_dict(cls, dikt) -> 'UserInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserInfo of this UserInfo.  # noqa: E501
        :rtype: UserInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_schedule(self):
        """Gets the current_schedule of this UserInfo.


        :return: The current_schedule of this UserInfo.
        :rtype: CourseInfo
        """
        return self._current_schedule

    @current_schedule.setter
    def current_schedule(self, current_schedule):
        """Sets the current_schedule of this UserInfo.


        :param current_schedule: The current_schedule of this UserInfo.
        :type current_schedule: CourseInfo
        """

        self._current_schedule = current_schedule

    @property
    def time_recorded(self):
        """Gets the time_recorded of this UserInfo.


        :return: The time_recorded of this UserInfo.
        :rtype: Dict[str, float]
        """
        return self._time_recorded

    @time_recorded.setter
    def time_recorded(self, time_recorded):
        """Sets the time_recorded of this UserInfo.


        :param time_recorded: The time_recorded of this UserInfo.
        :type time_recorded: Dict[str, float]
        """

        self._time_recorded = time_recorded

    @property
    def username(self):
        """Gets the username of this UserInfo.


        :return: The username of this UserInfo.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserInfo.


        :param username: The username of this UserInfo.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501
        if username is not None and len(username) < 1:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")  # noqa: E501

        self._username = username

    @property
    def email(self):
        """Gets the email of this UserInfo.


        :return: The email of this UserInfo.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserInfo.


        :param email: The email of this UserInfo.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501
        if email is not None and len(email) < 1:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")  # noqa: E501

        self._email = email

    @property
    def joined_at(self):
        """Gets the joined_at of this UserInfo.


        :return: The joined_at of this UserInfo.
        :rtype: datetime
        """
        return self._joined_at

    @joined_at.setter
    def joined_at(self, joined_at):
        """Sets the joined_at of this UserInfo.


        :param joined_at: The joined_at of this UserInfo.
        :type joined_at: datetime
        """

        self._joined_at = joined_at

    @property
    def courses(self):
        """Gets the courses of this UserInfo.


        :return: The courses of this UserInfo.
        :rtype: Dict[str, CourseInfo]
        """
        return self._courses

    @courses.setter
    def courses(self, courses):
        """Sets the courses of this UserInfo.


        :param courses: The courses of this UserInfo.
        :type courses: Dict[str, CourseInfo]
        """

        self._courses = courses
