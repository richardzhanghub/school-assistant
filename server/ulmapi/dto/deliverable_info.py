# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ulmapi.dto.base_model_ import Model
from ulmapi import util


class DeliverableInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deliverable_name=None, grade=None, weight=None, due_at=None, completed=None):  # noqa: E501
        """DeliverableInfo - a model defined in OpenAPI

        :param deliverable_name: The deliverable_name of this DeliverableInfo.  # noqa: E501
        :type deliverable_name: str
        :param grade: The grade of this DeliverableInfo.  # noqa: E501
        :type grade: float
        :param weight: The weight of this DeliverableInfo.  # noqa: E501
        :type weight: float
        :param due_at: The due_at of this DeliverableInfo.  # noqa: E501
        :type due_at: datetime
        :param completed: The completed of this DeliverableInfo.  # noqa: E501
        :type completed: bool
        """
        self.openapi_types = {
            'deliverable_name': str,
            'grade': float,
            'weight': float,
            'due_at': datetime,
            'completed': bool
        }

        self.attribute_map = {
            'deliverable_name': 'deliverable_name',
            'grade': 'grade',
            'weight': 'weight',
            'due_at': 'due_at',
            'completed': 'completed'
        }

        self._deliverable_name = deliverable_name
        self._grade = grade
        self._weight = weight
        self._due_at = due_at
        self._completed = completed

    @classmethod
    def from_dict(cls, dikt) -> 'DeliverableInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DeliverableInfo of this DeliverableInfo.  # noqa: E501
        :rtype: DeliverableInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deliverable_name(self):
        """Gets the deliverable_name of this DeliverableInfo.


        :return: The deliverable_name of this DeliverableInfo.
        :rtype: str
        """
        return self._deliverable_name

    @deliverable_name.setter
    def deliverable_name(self, deliverable_name):
        """Sets the deliverable_name of this DeliverableInfo.


        :param deliverable_name: The deliverable_name of this DeliverableInfo.
        :type deliverable_name: str
        """
        if deliverable_name is None:
            raise ValueError("Invalid value for `deliverable_name`, must not be `None`")  # noqa: E501
        if deliverable_name is not None and len(deliverable_name) < 1:
            raise ValueError("Invalid value for `deliverable_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._deliverable_name = deliverable_name

    @property
    def grade(self):
        """Gets the grade of this DeliverableInfo.


        :return: The grade of this DeliverableInfo.
        :rtype: float
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this DeliverableInfo.


        :param grade: The grade of this DeliverableInfo.
        :type grade: float
        """
        if grade is not None and grade > 100:  # noqa: E501
            raise ValueError("Invalid value for `grade`, must be a value less than or equal to `100`")  # noqa: E501
        if grade is not None and grade < 0:  # noqa: E501
            raise ValueError("Invalid value for `grade`, must be a value greater than or equal to `0`")  # noqa: E501

        self._grade = grade

    @property
    def weight(self):
        """Gets the weight of this DeliverableInfo.


        :return: The weight of this DeliverableInfo.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this DeliverableInfo.


        :param weight: The weight of this DeliverableInfo.
        :type weight: float
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501
        if weight is not None and weight > 100:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must be a value less than or equal to `100`")  # noqa: E501
        if weight is not None and weight < 0:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must be a value greater than or equal to `0`")  # noqa: E501

        self._weight = weight

    @property
    def due_at(self):
        """Gets the due_at of this DeliverableInfo.


        :return: The due_at of this DeliverableInfo.
        :rtype: datetime
        """
        return self._due_at

    @due_at.setter
    def due_at(self, due_at):
        """Sets the due_at of this DeliverableInfo.


        :param due_at: The due_at of this DeliverableInfo.
        :type due_at: datetime
        """
        if due_at is None:
            raise ValueError("Invalid value for `due_at`, must not be `None`")  # noqa: E501

        self._due_at = due_at

    @property
    def completed(self):
        """Gets the completed of this DeliverableInfo.


        :return: The completed of this DeliverableInfo.
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this DeliverableInfo.


        :param completed: The completed of this DeliverableInfo.
        :type completed: bool
        """
        if completed is None:
            raise ValueError("Invalid value for `completed`, must not be `None`")  # noqa: E501

        self._completed = completed
