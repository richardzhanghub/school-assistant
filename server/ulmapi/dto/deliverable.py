# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ulmapi.dto.base_model_ import Model
from ulmapi import util


class Deliverable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, course_id=None, weight=None, duedate=None):  # noqa: E501
        """Deliverable - a model defined in OpenAPI

        :param course_id: The course_id of this Deliverable.  # noqa: E501
        :type course_id: str
        :param weight: The weight of this Deliverable.  # noqa: E501
        :type weight: int
        :param duedate: The duedate of this Deliverable.  # noqa: E501
        :type duedate: datetime
        """
        self.openapi_types = {
            'course_id': str,
            'weight': int,
            'duedate': datetime
        }

        self.attribute_map = {
            'course_id': 'course_id',
            'weight': 'weight',
            'duedate': 'duedate'
        }

        self._course_id = course_id
        self._weight = weight
        self._duedate = duedate

    @classmethod
    def from_dict(cls, dikt) -> 'Deliverable':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Deliverable of this Deliverable.  # noqa: E501
        :rtype: Deliverable
        """
        return util.deserialize_model(dikt, cls)

    @property
    def course_id(self):
        """Gets the course_id of this Deliverable.


        :return: The course_id of this Deliverable.
        :rtype: str
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """Sets the course_id of this Deliverable.


        :param course_id: The course_id of this Deliverable.
        :type course_id: str
        """
        if course_id is None:
            raise ValueError("Invalid value for `course_id`, must not be `None`")  # noqa: E501

        self._course_id = course_id

    @property
    def weight(self):
        """Gets the weight of this Deliverable.


        :return: The weight of this Deliverable.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Deliverable.


        :param weight: The weight of this Deliverable.
        :type weight: int
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501
        if weight is not None and weight > 100:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must be a value less than or equal to `100`")  # noqa: E501
        if weight is not None and weight < 0:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must be a value greater than or equal to `0`")  # noqa: E501

        self._weight = weight

    @property
    def duedate(self):
        """Gets the duedate of this Deliverable.


        :return: The duedate of this Deliverable.
        :rtype: datetime
        """
        return self._duedate

    @duedate.setter
    def duedate(self, duedate):
        """Sets the duedate of this Deliverable.


        :param duedate: The duedate of this Deliverable.
        :type duedate: datetime
        """

        self._duedate = duedate
