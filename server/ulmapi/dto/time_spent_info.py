# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ulmapi.dto.base_model_ import Model
from ulmapi import util


class TimeSpentInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notes=None, started_at=None, ended_at=None):  # noqa: E501
        """TimeSpentInfo - a model defined in OpenAPI

        :param notes: The notes of this TimeSpentInfo.  # noqa: E501
        :type notes: str
        :param started_at: The started_at of this TimeSpentInfo.  # noqa: E501
        :type started_at: datetime
        :param ended_at: The ended_at of this TimeSpentInfo.  # noqa: E501
        :type ended_at: datetime
        """
        self.openapi_types = {
            'notes': str,
            'started_at': datetime,
            'ended_at': datetime
        }

        self.attribute_map = {
            'notes': 'notes',
            'started_at': 'started_at',
            'ended_at': 'ended_at'
        }

        self._notes = notes
        self._started_at = started_at
        self._ended_at = ended_at

    @classmethod
    def from_dict(cls, dikt) -> 'TimeSpentInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TimeSpentInfo of this TimeSpentInfo.  # noqa: E501
        :rtype: TimeSpentInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notes(self):
        """Gets the notes of this TimeSpentInfo.


        :return: The notes of this TimeSpentInfo.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this TimeSpentInfo.


        :param notes: The notes of this TimeSpentInfo.
        :type notes: str
        """
        if notes is None:
            raise ValueError("Invalid value for `notes`, must not be `None`")  # noqa: E501
        if notes is not None and len(notes) < 1:
            raise ValueError("Invalid value for `notes`, length must be greater than or equal to `1`")  # noqa: E501

        self._notes = notes

    @property
    def started_at(self):
        """Gets the started_at of this TimeSpentInfo.


        :return: The started_at of this TimeSpentInfo.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this TimeSpentInfo.


        :param started_at: The started_at of this TimeSpentInfo.
        :type started_at: datetime
        """
        if started_at is None:
            raise ValueError("Invalid value for `started_at`, must not be `None`")  # noqa: E501

        self._started_at = started_at

    @property
    def ended_at(self):
        """Gets the ended_at of this TimeSpentInfo.


        :return: The ended_at of this TimeSpentInfo.
        :rtype: datetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this TimeSpentInfo.


        :param ended_at: The ended_at of this TimeSpentInfo.
        :type ended_at: datetime
        """
        if ended_at is None:
            raise ValueError("Invalid value for `ended_at`, must not be `None`")  # noqa: E501

        self._ended_at = ended_at
