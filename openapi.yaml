openapi: 3.0.0
info:
  version: "1.0.0"
  title: University Life Manager API
  description: >-
    This is an OpenAPI specification for the University Life Manager backend. Request/response objects can be specified
    in components. Endpoints can be specified in paths.
servers:
  # Base path for endpoints
  - url: /api/v1
security:
  # By default, all endpoints require a bearer token
  - bearerAuth: []
paths:
  /signup:
    post:
      summary: Creates a new user (signup)
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupInfo'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '400':
          $ref: '#/components/responses/BadRequest'
  /users/{username}/course:
    post:
      summary: Create a new course for the user
      parameters:
        - name: username
          in: path
          description: Username
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseInfo'
      responses:
        '201':
          description: Course created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCourseResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      tags:
        - Course
    get:
      summary: Get all courses for the user
      parameters:
        - name: username
          in: path
          description: Username
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseInfo'
        '400':
          $ref: '#/components/responses/BadRequest'
      tags:
        - Course
  /users/{username}/course/{courseID}:
    get:
      summary: Get course by id for the user
      parameters:
        - name: username
          in: path
          description: Username
          required: true
          schema:
            type: string
        - name: courseID
          in: path
          description: Course ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseInfo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      tags:
        - Course
    put:
      summary: Replace a course for the user
      parameters:
        - name: username
          in: path
          description: Username
          required: true
          schema:
            type: string
        - name: courseID
          in: path
          description: Course ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseInfo'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCourseResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      tags:
        - Course
    delete:
      summary: Delete a course for the user
      parameters:
        - name: username
          in: path
          description: Username
          required: true
          schema:
            type: string
        - name: courseID
          in: path
          description: Course ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCourseResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      tags:
        - Course
  /login:
    post:
      summary: Exchange username and password for access token
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '401':
          $ref: '#/components/responses/AuthorizationError'
  /cat:
    post:
      summary: Create a new cat for the user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cat'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cat'
        '401':
          $ref: '#/components/responses/AuthorizationError'
      tags:
        - example
    get:
      summary: Get all cats for the user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cat'
        '401':
          $ref: '#/components/responses/AuthorizationError'
      tags:
        - example
  /cat/{catId}:
    get:
      summary: Get cat by id for the user
      parameters:
        - name: catId
          in: path
          description: Cat ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cat'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      tags:
        - example
    put:
      summary: Replace a cat for the user
      parameters:
        - name: catId
          in: path
          description: Cat ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cat'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cat'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      tags:
        - example
components:
  responses:
    AuthorizationError:
      description: Credentials are missing or invalid
    BadRequest:
      description: A malformed request could not be processed, e.g. a field must be unique or non-empty but was not
    NotFoundError:
      description: Entity could not be found
  # Request and response objects, see https://app.swaggerhub.com/apis/j84guo/iot-api/1.0.0 for more examples
  schemas:
    CourseInfo:
      type: object
      properties:
        course_id:
          type: string
          minLength: 1
        course_name:
          type: string
          minLength: 1
        expected_difficulty:
          type: integer
          format: int32
          minimum: 1
          maximum: 5
        desired_grade:
          type: integer
          format: int32
          minimum: 0
          maximum: 100       
      required:
        - 'course_id'
        - 'course_name'
        - 'expected_difficulty'   
        - 'desired_grade'
    CreateCourseResponse:
      type: object
      properties:
        created_at:
          type: string
          format: date-time 
        course_id:
          type: string
        username:
          type: string
      required:
        - 'created_at'
        - 'course_id'
        - 'username'  
    UpdateCourseResponse:
      type: object
      properties:
        updated_at:
          type: string
          format: date-time 
        course_id:
          type: string
        username:
          type: string
      required:
        - 'updated_at'
        - 'course_id'
        - 'username'  
    DeleteCourseResponse:
      type: object
      properties:
        deleted:
          type: boolean
      required:
        - 'deleted'   
    UserCredentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - 'username'
        - 'password'
    AccessToken:
      type: object
      properties:
        access_token:
          type: string
      required:
        - 'access_token'
    SignupInfo:
      type: object
      properties:
        email:
          type: string
          minLength: 1
        username:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 1
      required:
        - 'email'
        - 'username'
        - 'password'
    Cat:
      type: object
      properties:
        # Auto-generated on creation
        cat_id:
          type: string
        name:
          type: string
        weight:
          type: integer
          minimum: 0
          maximum: 100
        birth_date:
          type: string
          format: date-time
      required:
        - 'name'
        - 'weight'
        - 'birth_date'
  securitySchemes:
    # Example configuration for bearer token authentication
    bearerAuth:
      type: http
      scheme: bearer

